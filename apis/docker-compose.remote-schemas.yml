services:

  api-payments:
    image: ${DOCKER_IMAGE:-nossas/bonde-apis:main}
    environment:
      GRAPHQL_HTTP_URL: ${HASURA_API:-http://api-graphql.bonde.devel/v1/graphql}
      HASURA_SECRET: ${HASURA_SECRET}
      HOST: 0.0.0.0
      JWT_SECRET: ${JWT_SECRET:-segredo123}
      PAGARME_API_KEY: ${PAGARME_KEY}
      PORT: '3000'
    command:
      - pnpm m run start --filter payments-api
    healthcheck:
      test: "${DOCKER_WEB_HEALTHCHECK_TEST:-wget -qO- localhost:3000}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    labels:
      traefik.http.services.api-payments.loadbalancer.server.port: '3000'
      traefik.enable: 'true'
      traefik.http.routers.api-payments.tls: true
      traefik.http.routers.api-payments.tls.certresolver: myresolver

  api-domains:
    image: ${DOCKER_IMAGE:-nossas/bonde-apis:main}
    environment:
      AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
      AWS_ROUTE53_REGION: ${AWS_ROUTE53_REGION}
      AWS_ROUTE_IP: ${AWS_ROUTE_IP}
      AWS_SECRET_KEY: ${AWS_SECRET_KEY}
      GRAPHQL_HTTP_URL: ${HASURA_API:-http://api-graphql.bonde.devel/v1/graphql}
      HASURA_SECRET: ${HASURA_SECRET}
      HOST: 0.0.0.0
      JWT_SECRET: ${JWT_SECRET:-segredo123}
      PORT: '3000'
    command:
      - pnpm m run start --filter domains-api
    healthcheck:
      test: "${DOCKER_WEB_HEALTHCHECK_TEST:-wget -qO- localhost:3000}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    labels:
      traefik.http.services.api-domains.loadbalancer.server.port: '3000'
      traefik.enable: 'true'
      traefik.http.routers.api-domains.tls: true
      traefik.http.routers.api-domains.tls.certresolver: myresolver

  activists:
    image: ${DOCKER_IMAGE:-nossas/bonde-apis:main}
    environment:
      ACTION_SECRET_KEY: ${ACTION_SECRET_KEY}
      GRAPHQL_HTTP_URL: ${HASURA_API:-http://api-graphql.bonde.devel/v1/graphql}
      HASURA_SECRET: ${HASURA_SECRET}
      HOST: 0.0.0.0
      PORT: '3000'
    command:
      - pnpm m run start --filter activists-api
    healthcheck:
      test: "${DOCKER_WEB_HEALTHCHECK_TEST:-wget -qO- localhost:3000}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    labels:
      traefik.http.services.activists.loadbalancer.server.port: '3000'
      traefik.enable: 'true'
      traefik.http.routers.activists.tls: true
      traefik.http.routers.activists.tls.certresolver: myresolver

  api-redes:
    image: ${DOCKER_IMAGE:-nossas/bonde-apis:main}
    environment:
      GRAPHQL_HTTP_URL: ${HASURA_API:-http://api-graphql.bonde.devel/v1/graphql}
      HASURA_SECRET: ${HASURA_SECRET}
      HOST: 0.0.0.0
      JWT_SECRET: ${JWT_SECRET:-segredo123}
      PORT: '3000'
      ZENDESK_API_TOKEN: ${ZENDESK_API_TOKEN}
      ZENDESK_API_URL: ${ZENDESK_API_URL}
      ZENDESK_API_USER: ${ZENDESK_API_USER}
      ZENDESK_ORGANIZATIONS: ${ZENDESK_ORGANIZATIONS}
    command:
      - pnpm m run start --filter redes-api
    healthcheck:
      test: "${DOCKER_WEB_HEALTHCHECK_TEST:-wget -qO- localhost:3000}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    labels:
      traefik.http.services.api-redes.loadbalancer.server.port: '3000'
      traefik.enable: 'true'
      traefik.http.routers.api-redes.tls: true
      traefik.http.routers.api-redes.tls.certresolver: myresolver

  api-accounts:
    image: ${DOCKER_IMAGE:-nossas/bonde-apis:main}
    environment:
      ACCOUNTS_REGISTER_URL: https://accounts.${DEFAULT_DOMAIN_RULE}/register
      GRAPHQL_HTTP_URL: ${HASURA_API:-http://api-graphql.bonde.devel/v1/graphql}
      HASURA_SECRET: ${HASURA_SECRET}
      HOST: 0.0.0.0
      JWT_SECRET: ${JWT_SECRET:-segredo123}
      LOG_LEVEL: debug
      PORT: '4001'
    command:
      - pnpm m run start --filter accounts-api
    labels:
      traefik.http.services.api-accounts.loadbalancer.server.port: '4001'
      traefik.enable: 'true'
      traefik.http.routers.api-accounts.tls: true
      traefik.http.routers.api-accounts.tls.certresolver: myresolver

  notifications:
    image: ${DOCKER_IMAGE:-nossas/bonde-apis:main}
    environment:
      ELASTICSEARCH_CLOUD_ID: ${ELASTICSEARCH_CLOUD_ID}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      ELASTIC_APM_SECRET_TOKEN: ${ELASTIC_APM_SECRET_TOKEN}
      ELASTIC_APM_SERVER_URL: ${ELASTIC_APM_SERVER_URL}
      ELASTIC_APM_SERVICE_NAME: ${ELASTIC_APM_SERVICE_NAME:-notifications}
      HOST: 0.0.0.0
      PORT: '3000'
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      SENDGRID_WEBHOOK_KEY: ${SENDGRID_WEBHOOK_KEY}
    command:
      - pnpm m run start --filter notifications
    healthcheck:
      test: "${DOCKER_WEB_HEALTHCHECK_TEST:-wget -qO- localhost:3000}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    labels:
      traefik.http.services.notifications.loadbalancer.server.port: '3000'
      traefik.enable: 'true'
      traefik.http.routers.notifications.tls: true
      traefik.http.routers.notifications.tls.certresolver: myresolver