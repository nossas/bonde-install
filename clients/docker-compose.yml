services:
  accounts:
    image: ${DOCKER_IMAGE:-nossas/bonde-clients:v7.6.5}
    command: pnpm --filter accounts-client start
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    pull_policy: always
    healthcheck:
      test: "${DOCKER_WEB_HEALTHCHECK_TEST:-wget -qO- localhost:3000}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    labels:
      traefik.http.services.accounts.loadbalancer.server.port: '3000'
      traefik.enable: 'true'
      traefik.http.routers.accounts.tls: true
      traefik.http.routers.accounts.tls.certresolver: myresolver

  app:
    image: ${DOCKER_IMAGE:-nossas/bonde-clients:v7.6.5}
    command: pnpm --filter admin-client start
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    pull_policy: always
    healthcheck:
      test: "${DOCKER_WEB_HEALTHCHECK_TEST:-wget -qO- localhost:5000}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    labels:
      traefik.http.services.app.loadbalancer.server.port: '5000'
      traefik.enable: 'true'
      traefik.http.routers.app.priority: 1
      traefik.http.routers.app.tls: true
      traefik.http.routers.app.tls.certresolver: myresolver

  admin-canary:
    image: ${DOCKER_IMAGE:-nossas/bonde-clients:v7.6.5}
    command: pnpm --filter canary-client start
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    pull_policy: always
    healthcheck:
      test: "${DOCKER_WEB_HEALTHCHECK_TEST:-wget -qO- localhost:3000}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    labels:
      traefik.http.services.admin-canary.loadbalancer.server.port: '3000'
      traefik.enable: 'true'
      traefik.http.routers.admin-canary.tls: true
      traefik.http.routers.admin-canary.tls.certresolver: myresolver

  redes:
    image: ${DOCKER_IMAGE:-nossas/bonde-clients:v7.6.5}
    command: pnpm --filter redes-client start
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    pull_policy: always
    healthcheck:
      test: "${DOCKER_WEB_HEALTHCHECK_TEST:-wget -qO- localhost:3000}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    labels:
      traefik.http.services.redes.loadbalancer.server.port: '3000'
      traefik.enable: 'true'
      traefik.http.routers.redes.tls: true
      traefik.http.routers.redes.tls.certresolver: myresolver

  public:
    image: ${DOCKER_WEBPAGE_IMAGE:-nossas/bonde-clients:v7.6.5}
    command: pnpm --filter webpage-client start
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    pull_policy: always
    environment:
      - PORT=3000
      - NODE_ENV=${PUBLIC_NODE_ENV:-development}
      - ACTION_SECRET_KEY=${PUBLIC_ACTION_SECRET_KEY}
      - REACT_APP_API_GRAPHQL_SECRET=${PUBLIC_HASURA_SECRET}
      - REACT_APP_PAGARME_KEY=${PUBLIC_PAGARME_KEY}
      - REACT_APP_DOMAIN_API_ACTIVISTS=${PUBLIC_HASURA_API:-http://api-graphql.bonde.devel/v1/graphql}
      - REACT_APP_DOMAIN_API_GRAPHQL=${PUBLIC_HASURA_API:-http://api-graphql.bonde.devel/v1/graphql}
      - REACT_APP_DOMAIN_API_REST=${PUBLIC_REST_API:-http://api-rest.bonde.devel}
      - REACT_APP_DOMAIN_PUBLIC=${DEFAULT_DOMAIN_RULE:-bonde.devel}
      - REACT_APP_ACTIVE_API_CACHE=${ACTIVE_API_CACHE:-false} #      - REACT_APP_DOMAIN_IMAGINARY=${PUBLIC_IMAGINARY:-http://imaginary.bonde.devel}
    healthcheck:
      test: "${DOCKER_WEB_HEALTHCHECK_TEST:-wget -qO- localhost:3000/api/ping}"
      interval: "60s"
      timeout: "3s"
      start_period: "50s"
      retries: 3
    labels:
      - traefik.http.services.public.loadbalancer.server.port=3000
      - traefik.enable=true
      - traefik.http.routers.public.priority=-1
      - traefik.http.routers.public.tls=true
      - traefik.http.routers.public.tls.certresolver=myresolver
      - traefik.http.routers.public.rule=HostRegexp(`{host:.+}`)
      - traefik.http.routers.public.tls.domains[0].main=${DEFAULT_DOMAIN_RULE:-bonde.devel}
      - traefik.http.routers.public.tls.domains[0].sans=*.${DEFAULT_DOMAIN_RULE:-bonde.devel}

networks:
  default:
    name: bonde
