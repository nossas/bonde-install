# This script is meant for quick & easy install via:
#   $ curl -fsSL https://get.docker.com -o get-docker.sh
#   $ sh get-docker.sh
# /etc/hosts 127.0.0.1 api-graphql.bonde.devel traefik.bonde.devel bonde.devel
services:
  traefik:
    image: "traefik:v3.1"
    depends_on:
      - etcd
    command:
      # - "--global.defaultRuleSyntax=v2"
      - "--accesslog.filepath=/logs/access.log"
      - "--accesslog.format=json"
      - "--log.filepath=/logs/traefik.log"
      - "--log.format=json"
      - "--log.level=${TRAEFIK_LOG_LEVEL:-ERROR}"
      - "--metrics.influxdb2=true"
      - "--metrics.influxdb2.address=${TRAEFIK_INFLUX_HOST:-http://localhost:8086}"
      - "--metrics.influxdb2.token=${TRAEFIK_INFLUX_SECRET:-secret}"
      - "--metrics.influxdb2.org=NOSSAS"
      - "--metrics.influxdb2.bucket=metrics"
      - "--metrics.influxdb2.additionallabels.host=${TRAEFIK_INFLUX_HOSTNAME:-example.com}"
      # - "--metrics.prometheus"
      # - "--entrypoints.websecure.http.middlewares=compress@file${TRAEFIK_PLUGINS:-}"
      # - "--experimental.plugins.fail2ban.modulename=github.com/tommoulard/fail2ban"
      # - "--experimental.plugins.fail2ban.version=v0.6.0"
      - "--global.checknewversion=${TRAEFIK_CHECK_NEW_VERSION:-false}"
      - "--global.sendanonymoususage=${TRAEFIK_SEND_ANONYMOUS_USAGE:-false}"
      # - "--pilot.token=${TRAEFIK_PILOT_TOKEN:-}"
      - "--ping"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.defaultRule=Host(`{{ index .Labels \"com.docker.compose.service\"}}.${DEFAULT_DOMAIN_RULE:-bonde.devel}`)"
      - "--providers.etcd=true"
      - "--providers.etcd.endpoints=etcd:2379"
      - "--providers.etcd.rootkey=traefik"
      # Timeouts
      - "--entryPoints.web.transport.respondingTimeouts.readTimeout=90s"
      - "--entryPoints.web.transport.respondingTimeouts.writeTimeout=90s"
      - "--entryPoints.web.transport.respondingTimeouts.idleTimeout=240s"
      #
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
      # - "--entrypoints.websecure.http.tls=true"
      # - "--entrypoints.websecure.http.tls.options=default@etcd"
      - "--entrypoints.websecure.http.middlewares=securityHeader@etcd"

      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=${DEFAULT_EMAIL_ACME:-tech@bonde.devel}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=route53"
    restart: always
    healthcheck:
      test: ['CMD', 'traefik', 'healthcheck', '--ping']
      interval: 10s
      timeout: 10s
      retries: 5
    ports:
      - "80:80"
      - "443:443"
      # - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "letsencrypt:/letsencrypt"
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-xxxxxxx}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-xxxxxx}
      AWS_REGION: ${AWS_REGION:-us-east-1}
    labels:
      - traefik.enable=true

      # global redirection: https (www.) to https
      - traefik.http.routers.wwwsecure-catchall.rule=HostRegexp(`{host:(www\\.).+}`)
      - traefik.http.routers.wwwsecure-catchall.entrypoints=websecure
      - traefik.http.routers.wwwsecure-catchall.tls=true
      - traefik.http.routers.wwwsecure-catchall.middlewares=wwwtohttps

      # middleware: http(s)://(www.) to  https://
      - traefik.http.middlewares.wwwtohttps.redirectregex.regex=^https?://(?:www\\.)?(.+)
      - traefik.http.middlewares.wwwtohttps.redirectregex.replacement=https://$${1}
      - traefik.http.middlewares.wwwtohttps.redirectregex.permanent=true

      # export traefik dashboard
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.tls.certresolver=myresolver
      # - traefik.http.routers.traefik.middlewares=test-auth
      # - "traefik.http.middlewares.test-auth.basicauth.users=${DEFAULT_TRAEFIK_USER:-cobrador:$$apr1$$4YfBuKHl$$jyPbiBJLOH7C5CzHFE4G10}"

  etcd:
    image: 'bitnami/etcd:latest'
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      - ETCD_ENABLE_V2=true
      - ETCDCTL_API=3
    volumes:
      - etcd_data:/bitnami/etcd
    ports:
      - 2379
      - 2380

  redis:
    image: redislabs/redismod
    restart: always
    ports:
      - 6379
    # command: redis-server --save
    # volumes:
    #   - 'redis-data:/bitnami/redis/data'
  
  redisinsight:
    image: redislabs/redisinsight:latest
    ports:
      - 8001
    volumes:
      - redisinsight_data:/db 
    labels:
      - traefik.enable=true
      - traefik.http.services.redisinsight.loadbalancer.server.port=8001
      - traefik.http.routers.redisinsight.tls=true
      - traefik.http.routers.redisinsight.tls.certresolver=myresolver
 
  n8n:
    image: n8nio/n8n:0.202.1
    depends_on:
      - postgres
    environment:
      - DB_POSTGRESDB_DATABASE=${DB_POSTGRESDB_DATABASE:-n8ndb}
      - DB_POSTGRESDB_HOST=${DB_POSTGRESDB_HOST:-postgres}
      - DB_POSTGRESDB_PASSWORD=${DB_POSTGRESDB_PASSWORD:-1234}
      - DB_POSTGRESDB_PORT=${DB_POSTGRESDB_PORT:-5432}
      - DB_POSTGRESDB_USER=${DB_POSTGRESDB_USER:-n8n}
      - DB_TYPE=${DB_TYPE:-postgresdb}
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE:-true}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD:-1234}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-user}
      - N8N_USER_MANAGEMENT_DISABLED=${N8N_USER_MANAGEMENT_DISABLED:-true}
      - WEBHOOK_URL=${WEBHOOK_URL:-http://n8n.bonde.devel}
    volumes:
    - local-n8n:/home/node/.n8n
    # ports:
    # - 5678:5678/tcp
    command:
    - /bin/sh
    - -c
    - sleep 5; n8n start
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    labels:
      - traefik.enable=true
      - traefik.http.services.n8n.loadbalancer.server.port=5678
      - traefik.http.routers.n8n.tls=true
      - traefik.http.routers.n8n.tls.certresolver=myresolver
  
  # Database used only staging environment to N8N
  postgres:
    image: postgres:12.1-alpine
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-n8ndb}
      - POSTGRES_NON_ROOT_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD:-1234}
      - POSTGRES_NON_ROOT_USER=${POSTGRES_NON_ROOT_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-1234}
      - POSTGRES_USER=${POSTGRES_USER:-n8n}

  elastic-agent:
    image: docker.elastic.co/beats/elastic-agent:8.0.0
    restart: always
    user: root # note, synthetic browser monitors require this set to `elastic-agent`
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - FLEET_ENROLLMENT_TOKEN=${FLEET_ENROLLMENT_TOKEN}
      - FLEET_ENROLL=${FLEET_ENROLL:-1}
      - FLEET_URL=${FLEET_URL}

  imaginary:
    image: h2non/imaginary:latest
    volumes:
      - imaginary_data:/mnt/data
    environment:
       PORT: 9000
    command:
      -mount /mnt/data
      -enable-url-source
      -cors
      -gzip
      -allowed-origins ${IMAGINARY_ALLOWED_ORIGINS:-https://s3.amazonaws.com/hub-central/uploads/}
      -http-cache-ttl 31556926
      -enable-placeholder
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    labels:
      - traefik.enable=true
      - traefik.http.services.imaginary.loadbalancer.server.port=9000
      - traefik.http.routers.imaginary.tls=true
      - traefik.http.routers.imaginary.tls.certresolver=myresolver

volumes:
  local-n8n:
    driver: local
  letsencrypt:
    driver: local
  etcd_data:
    driver: local
  imaginary_data:
    driver: local
  redisinsight_data:
    driver: local

networks:
  default:
    name: bonde
